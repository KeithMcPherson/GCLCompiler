Compiled on: Sat Jun 11 17:02:52 EDT 2011
module test11_6 { bounds check twoDimensions
$        LDA     R15, V1
$        LDA     R14, C1
$        LD      R13, #16000
$        LD      R12, R13
$        LD      R11, R13
-- test of array bounds check (2 dimension ) }
private
$        JMP     M1
 integer i,j;
 constant max = 2;
 constant mlo = 1;
 typedefinition integer range [0..mlo] zero_mlo;
 integer array [zero_mlo][zero_mlo] a;
begin
 i := 0;
$    LABEL M1
$        LD      R0, +4(R14)
$        STO     R0, +0(R15)
 do i <= max -> read a[i][0]; i := i+1; od; { data 1 2 3 }
$    LABEL J2
$        LD      R1, +0(R15)
$        LD      R0, #1
$        IC      R1, +6(R14)
$        JLE     &4
$        LD      R0, #0
$        IC      R0, #1
$        JNE     J3
$        LDA     R0, +4(R15)
$        LD      R1, +0(R15)
$        TRNG    R1, +0(R14)
$        IS      R1, #0
$        IM      R1, #4
$        IA      R0, R1
$        LD      R1, +8(R14)
$        TRNG    R1, +0(R14)
$        IS      R1, #0
$        IM      R1, #2
$        IA      R0, R1
$        RDI     *R0
$        LD      R1, +0(R15)
$        IA      R1, +10(R14)
$        STO     R1, +0(R15)
$        JMP     J2
$    LABEL J3
 a[0][1] := a[0][0];
$        LDA     R1, +4(R15)
$        LD      R2, +12(R14)
$        TRNG    R2, +0(R14)
$        IS      R2, #0
$        IM      R2, #4
$        IA      R1, R2
$        LD      R2, +14(R14)
$        TRNG    R2, +0(R14)
$        IS      R2, #0
$        IM      R2, #2
$        IA      R1, R2
$        LDA     R2, +4(R15)
$        LD      R3, +16(R14)
$        TRNG    R3, +0(R14)
$        IS      R3, #0
$        IM      R3, #4
$        IA      R2, R3
$        LD      R3, +18(R14)
$        TRNG    R3, +0(R14)
$        IS      R3, #0
$        IM      R3, #2
$        IA      R2, R3
$        LD      R3, *R2
$        PUSH    R13, 8
$        POP     R13, 4
$        STO     R2, *R1
 i := 1;
$        LD      R1, +20(R14)
$        STO     R1, +0(R15)
 do i <= max -> 
$    LABEL J4
$        LD      R2, +0(R15)
$        LD      R1, #1
$        IC      R2, +22(R14)
$        JLE     &4
$        LD      R1, #0
$        IC      R1, #1
$        JNE     J5
	i := i+1;
$        LD      R1, +0(R15)
$        IA      R1, +24(R14)
$        STO     R1, +0(R15)
	a[i][1] := a[i-1][1] + a[i][0] ; 
$        LDA     R1, +4(R15)
$        LD      R2, +0(R15)
$        TRNG    R2, +0(R14)
$        IS      R2, #0
$        IM      R2, #4
$        IA      R1, R2
$        LD      R2, +26(R14)
$        TRNG    R2, +0(R14)
$        IS      R2, #0
$        IM      R2, #2
$        IA      R1, R2
$        LD      R2, +0(R15)
$        IS      R2, +28(R14)
$        LDA     R3, +4(R15)
$        TRNG    R2, +0(R14)
$        IS      R2, #0
$        IM      R2, #4
$        IA      R3, R2
$        LD      R2, +30(R14)
$        TRNG    R2, +0(R14)
$        IS      R2, #0
$        IM      R2, #2
$        IA      R3, R2
$        LDA     R2, +4(R15)
$        LD      R4, +0(R15)
$        TRNG    R4, +0(R14)
$        IS      R4, #0
$        IM      R4, #4
$        IA      R2, R4
$        LD      R4, +32(R14)
$        TRNG    R4, +0(R14)
$        IS      R4, #0
$        IM      R4, #2
$        IA      R2, R4
$        LD      R4, *R3
$        IA      R4, *R2
$        STO     R4, *R1
 od;
$        JMP     J4
$    LABEL J5
 i := 0;
$        LD      R1, +34(R14)
$        STO     R1, +0(R15)
 do i <= max -> 
$    LABEL J6
$        LD      R2, +0(R15)
$        LD      R1, #1
$        IC      R2, +36(R14)
$        JLE     &4
$        LD      R1, #0
$        IC      R1, #1
$        JNE     J7
	i := i+1;
$        LD      R1, +0(R15)
$        IA      R1, +38(R14)
$        STO     R1, +0(R15)
	a[i][2]:= a[i][0] * a[i][1]; 
$        LDA     R1, +4(R15)
$        LD      R2, +0(R15)
$        TRNG    R2, +0(R14)
$        IS      R2, #0
$        IM      R2, #4
$        IA      R1, R2
$        LD      R2, +40(R14)
$        TRNG    R2, +0(R14)
$        IS      R2, #0
$        IM      R2, #2
$        IA      R1, R2
$        LDA     R2, +4(R15)
$        LD      R3, +0(R15)
$        TRNG    R3, +0(R14)
$        IS      R3, #0
$        IM      R3, #4
$        IA      R2, R3
$        LD      R3, +42(R14)
$        TRNG    R3, +0(R14)
$        IS      R3, #0
$        IM      R3, #2
$        IA      R2, R3
$        LDA     R3, +4(R15)
$        LD      R4, +0(R15)
$        TRNG    R4, +0(R14)
$        IS      R4, #0
$        IM      R4, #4
$        IA      R3, R4
$        LD      R4, +44(R14)
$        TRNG    R4, +0(R14)
$        IS      R4, #0
$        IM      R4, #2
$        IA      R3, R4
$        LD      R4, *R2
$        IM      R4, *R3
$        STO     R4, *R1
 od;
$        JMP     J6
$    LABEL J7
 i := 0;
$        LD      R1, +46(R14)
$        STO     R1, +0(R15)
 j := 0;
$        LD      R1, +48(R14)
$        STO     R1, +2(R15)
do i <= max & j <= max ->
$    LABEL J8
$        LD      R2, +0(R15)
$        LD      R1, #1
$        IC      R2, +50(R14)
$        JLE     &4
$        LD      R1, #0
$        LD      R3, +2(R15)
$        LD      R2, #1
$        IC      R3, +52(R14)
$        JLE     &4
$        LD      R2, #0
$        BA      R1, R2
$        IC      R1, #1
$        JNE     J9
	write a[i][j]; j := j+1;
$        LDA     R1, +4(R15)
$        LD      R2, +0(R15)
$        TRNG    R2, +0(R14)
$        IS      R2, #0
$        IM      R2, #4
$        IA      R1, R2
$        LD      R2, +2(R15)
$        TRNG    R2, +0(R14)
$        IS      R2, #0
$        IM      R2, #2
$        IA      R1, R2
$        WRI     *R1
$        WRNL    
$        LD      R1, +2(R15)
$        IA      R1, +54(R14)
$        STO     R1, +2(R15)
	if j > max -> 
$        LD      R2, +2(R15)
$        LD      R1, #1
$        IC      R2, +56(R14)
$        JGT     &4
$        LD      R1, #0
$        IC      R1, #1
$        JNE     J11
		i := i+1;
$        LD      R1, +0(R15)
$        IA      R1, +58(R14)
$        STO     R1, +0(R15)
		j := 0;
$        LD      R1, +60(R14)
$        STO     R1, +2(R15)
	 [] j <= max -> skip;
$        JMP     J10
$    LABEL J11
$        LD      R2, +2(R15)
$        LD      R1, #1
$        IC      R2, +62(R14)
$        JLE     &4
$        LD      R1, #0
$        IC      R1, #1
$        JNE     J12
	fi;
$        JMP     J10
$    LABEL J12
$        HALT    
$    LABEL J10
od;
$        JMP     J8
$    LABEL J9
 { output, if you don't catch the out of bounds
  error in the compiler then you get one
  run time error}
 end.
$        HALT    
$    LABEL C1
$        INT      0
$        INT      1
$        INT      0
$        INT      2
$        INT      0
$        INT      1
$        INT      0
$        INT      1
$        INT      0
$        INT      0
$        INT      1
$        INT      2
$        INT      1
$        INT      1
$        INT      1
$        INT      1
$        INT      0
$        INT      0
$        INT      2
$        INT      1
$        INT      2
$        INT      0
$        INT      1
$        INT      0
$        INT      0
$        INT      2
$        INT      2
$        INT      1
$        INT      2
$        INT      1
$        INT      0
$        INT      2
$    LABEL V1
$        SKIP     12
  <end of compilation of ..\tests\test11_6>.  There were no errors detected.
  Allocated Registers: 0 11 12 13 14 15 

