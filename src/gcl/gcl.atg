$FPSX
COMPILER gcl

		static final boolean DIRECT = CodegenConstants.DIRECT;
		static final boolean INDIRECT = CodegenConstants.INDIRECT;
		IntegerType integerType = SemanticActions.INTEGER_TYPE;
		BooleanType booleanType = SemanticActions.BOOLEAN_TYPE;
		TypeDescriptor noType = SemanticActions.NO_TYPE;

/*==========================================================*/
CHARACTERS 
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".
  digit = "0123456789".
  eol = '\r'.
  nl = '\n'.
  tab = '\t'.
  underscore = "_".
  stringSingle = ANY - eol - nl - "'".
  stringDouble = ANY - eol - nl - '"'.

TOKENS
  identifier  = letter {letter | digit | underscore}.
  numeral = digit {digit}.
  stringConstant = ('"' {stringDouble} '"') | ("'" {stringSingle} "'"). 
  
PRAGMAS 
	option1 = "$"("c"|"C")("+"|"-").
		(. CompilerOptions.listCode = la.val.charAt(2) == '+'; .)
	option3 = "$"("o"|"O")("+"|"-").
		(. CompilerOptions.optimize = la.val.charAt(2) == '+'; .)
	option5 = "$"("s"|"S")"+". (. SymbolTable.dumpAll(); .)
	option6 = "$"("s"|"S")"-".  /* ignore */
	option7 = "$"("m"|"M")("+"|"-").
		(. CompilerOptions.showMessages = la.val.charAt(2) == '+'; .)
	option9 = "$"("r"|"R")"+". (. CompilerOptions.printAllocatedRegisters(); .)
	option10 = "$"("r"|"R")"-".  /* ignore */

COMMENTS FROM "{" TO "}" NESTED
COMMENTS FROM "--" TO eol

IGNORE eol + tab + nl

/*==========================================================*/
PRODUCTIONS

gcl
=
	(. semantic.startCode();  SymbolTable scope = SymbolTable.currentScope(); .)
	SYNC module<scope> 
	{ (. scope = scope.openScope(true); .) SYNC module<scope> } 
	(. semantic.finishCode(); .) .
/*----------------------------------------------------------*/
module<SymbolTable scope> (. Identifier id; .)
= "module" identifier (. id = new Identifier(currentToken().spelling()); semantic.declareModule(scope, id); .) definitionPart<scope>  
				[ "private" (. SymbolTable privateScope = scope.openScope(false); semantic.declarePrivateScope(scope); .) block<privateScope> ] "." .
/*----------------------------------------------------------*/
block<SymbolTable scope>
=
     definitionPart<scope> SYNC "begin" (. semantic.doLink(); .) statementPart<scope> "end".
/*----------------------------------------------------------*/
definitionPart<SymbolTable scope>   =    {SYNC definition<scope> WEAK ";" }.
/*----------------------------------------------------------*/
statementPart<SymbolTable scope> 
= 
	SYNC statement<scope> WEAK ";" { SYNC statement<scope> WEAK ";"}.
/*----------------------------------------------------------*/
definition<SymbolTable scope>  
=  
	variableDefinition<scope, ParameterKind.NOT_PARAM>  
	| constantDefinition<scope>
	| typeDefinition<scope>
	| procedureDefinition<scope>.
/*----------------------------------------------------------*/
variableDefinition<SymbolTable scope, ParameterKind kindOfParam> 
	(. TypeDescriptor type; Identifier id; .)
=
	type<^type, scope> identifier
		(. 	id = new Identifier(currentToken().spelling());
			semantic.declareVariable(scope, type, id, kindOfParam);
		.)
	{	"," identifier
		(. 	id = new Identifier(currentToken().spelling());
			semantic.declareVariable(scope, type, id, kindOfParam);
		.)
	}.
/*----------------------------------------------------------*/
constantDefinition<SymbolTable scope> 
 (. Expression expr; Identifier id; .)
=
	 "constant" identifier 	(. 	id = new Identifier(currentToken().spelling()); .)
		"=" constant<^expr, scope>
			(. semantic.declareConstant(scope, id, expr); .).
/*----------------------------------------------------------*/		
constant<^ConstantExpression result, SymbolTable scope> (. Expression expr; .)
=
	expression<^expr, scope> (. result = expr.expectConstant(expr, err); .).
/*----------------------------------------------------------*/
type<^TypeDescriptor result, SymbolTable scope>	(. result = noType; .)
=
	typeSymbol<^result, scope> [ arrayType<^result, result, scope> | rangeType<^result, result, scope> ]  |  tupleType<^result, scope> .
/*----------------------------------------------------------*/
typeSymbol<^TypeDescriptor result, SymbolTable scope> 
(. Identifier id; result = null; SemanticItem typeDef; .)
=
	"integer" (. result = integerType; .)
	|"Boolean" (. result = booleanType; .)
	| qualifiedIdentifier<^typeDef, scope> (. id = new Identifier(currentToken().spelling());
	typeDef = semantic.semanticValue(scope, id); 
	result = typeDef.expectType(err);.) .
	
/*----------------------------------------------------------*/
typeDefinition<SymbolTable scope> 
 (. Identifier id; TypeDescriptor type;.)
=
	 "typedefinition" type<^type, scope> identifier 	(. 	id = new Identifier(currentToken().spelling()); .)
			(. semantic.declareType(scope, id, type); .).
/*----------------------------------------------------------*/
tupleType<^TupleType result, SymbolTable scope> (. result = null; TypeList carrier = new TypeList(); .)
=
	"tuple" "[" ( justProcs<^carrier, carrier, scope> | fieldsAndProcs<^carrier, carrier, scope> ) "]"
     (. result = new TupleType(carrier); .) .

/*----------------------------------------------------------*/
justProcs<^TypeList carrier, TypeList currentCarrier, SymbolTable scope> 
(. Procedure proc; carrier = currentCarrier; .)
=
procedureDeclaration<^proc, scope> (. carrier.enterProc(proc); .) { "," procedureDeclaration<^proc, scope> (. carrier.enterProc(proc); .)}.

/*----------------------------------------------------------*/
fieldsAndProcs<^TypeList carrier, TypeList currentCarrier, SymbolTable scope>  (. TypeDescriptor type; Identifier id; carrier = currentCarrier; .)
=
typeSymbol<^type, scope> identifier (.id = new Identifier(currentToken().spelling()); carrier.enter(type, id);.)
moreFieldsAndProcs<^carrier, carrier, scope>.

/*----------------------------------------------------------*/
moreFieldsAndProcs<^TypeList carrier, TypeList currentCarrier, SymbolTable scope> (. TypeDescriptor type; Identifier id; carrier = currentCarrier; .)
=
[ ","  [typeSymbol<^type, scope> identifier (.id = new Identifier(currentToken().spelling()); carrier.enter(type, id);.)] 
moreFieldsAndProcs<^carrier, carrier, scope> | [justProcs<^carrier, carrier, scope>] ].

/*----------------------------------------------------------*/    
procedureDeclaration<^Procedure proc, SymbolTable scope> (. Identifier id;.)
=
"procedure" identifier (. id = new Identifier(currentToken().spelling());  
                          proc = semantic.declareProcedure(scope, id); if (proc!= null) {scope = proc.getScope();} .) 
paramPart<scope> (. semantic.endDeclareProcedure(); .).
	
/*----------------------------------------------------------*/    
paramPart<SymbolTable scope>
=
"(" [ paramDefinition<scope> {  ";" paramDefinition<scope> } ] ")".

 /*----------------------------------------------------------*/    
paramDefinition<SymbolTable scope>
=
("value"  variableDefinition<scope, ParameterKind.VALUE_PARAM>) | 
("reference" variableDefinition<scope, ParameterKind.REFERENCE_PARAM>) .
 
 /*----------------------------------------------------------*/    
callStatement<Expression tupleExpression, SymbolTable scope> (. Identifier procID; ExpressionList arguments; .)
=
"!" identifier (. procID = new Identifier(currentToken().spelling()); .)
argumentList<^arguments, scope> (. semantic.callProcedure(tupleExpression, procID, arguments); .).

 /*----------------------------------------------------------*/    
argumentList<^ExpressionList arguments, SymbolTable scope>
=
(. arguments = null; .)
"(" [ (. Expression exp; ExpressionList argumentList = new ExpressionList(); .)
		 expression<^exp, scope> (. argumentList.enter(exp); .) 
		 { "," expression<^exp, scope> (. argumentList.enter(exp); .) }
		 (. arguments = argumentList; .) ] ")" .

 /*----------------------------------------------------------*/    
assignOrCallStatement<SymbolTable scope> (. Expression exp; .)
=
variableAccessEtc<^exp, scope> (assignStatement<scope, exp> | callStatement<exp, scope>).

 /*----------------------------------------------------------*/    
procedureDefinition<SymbolTable scope> (. Identifier tupleID; Identifier procID; Procedure proc; .)
=
"procedure" identifier (. tupleID = new Identifier(currentToken().spelling()); .) 
"@" identifier (. procID = new Identifier(currentToken().spelling()); 
                  proc = semantic.defineProcedure(procID, scope.lookupIdentifier(tupleID).semanticRecord()); 
                  if(proc!=null) {scope = proc.getScope();}
                  .) block<scope> (. semantic.endDefineProcedure(proc); .).

 /*----------------------------------------------------------*/    
returnStatement<>
=
"return" (. semantic.doReturn(); .).

 /*----------------------------------------------------------*/    
arrayType<^ArrayType result, TypeDescriptor baseType, SymbolTable scope>  (. .)
=	
(. SemanticItem subscriptType; ArrayCarrier carrier = new ArrayCarrier();.)
"array" "[" typeSymbol<^subscriptType, scope> (. carrier.push(subscriptType.expectType(err), err); .) "]" 
						{"[" typeSymbol<^subscriptType, scope> (. carrier.push(subscriptType.expectType(err), err); .) "]"}
	(. result = semantic.buildArray(baseType, carrier, err); .).
 /*----------------------------------------------------------*/
rangeType<^TypeDescriptor result, TypeDescriptor baseType, SymbolTable scope>   (. ConstantExpression lowBound; ConstantExpression highBound; .)
=
	"range" "[" constant<^lowBound, scope>
		  ".." constant<^highBound, scope>
	"]" 
	(.
        result = semantic.buildRange(baseType, lowBound, highBound); .) .

/*----------------------------------------------------------*/
statement<SymbolTable scope>
=
	emptyStatement | readStatement<scope>  | writeStatement<scope> 
	| assignOrCallStatement<scope> | ifStatement<scope> | doStatement<scope> | forStatement<scope>
	| returnStatement<>
	.
/*----------------------------------------------------------*/
emptyStatement     = "skip".
/*----------------------------------------------------------*/
readStatement<SymbolTable scope>      (. Expression exp; .)
=
	"read" variableAccessEtc<^exp, scope>  (. semantic.readVariable(exp); .)
		{ ","  variableAccessEtc<^exp, scope>  (. semantic.readVariable(exp); .) } .
/*----------------------------------------------------------*/
writeStatement<SymbolTable scope>
=
	"write" writeItem<scope> {"," writeItem<scope>}
		(. semantic.genEol(); .).
/*----------------------------------------------------------*/		
writeItem<SymbolTable scope> 
(. Expression exp; .)
=
	expression<^exp, scope>  (. semantic.writeExpression(exp); .)
	| stringConstant (. semantic.writeStringConstant(new StringConstant(currentToken().spelling())); .).
/*----------------------------------------------------------*/
assignStatement<SymbolTable scope, Expression left>
		(. AssignRecord expressions = new AssignRecord(); Expression exp = left; .)
=
		 (. expressions.left(exp); .)
		{ "," variableAccessEtc<^exp, scope> (. expressions.left(exp); .) }
		":="
		expression<^exp, scope> (. expressions.right(exp); .)
		{ "," expression<^exp, scope> (. expressions.right(exp); .) }
		(. semantic.parallelAssign(expressions); .).
/*----------------------------------------------------------*/
ifStatement<SymbolTable scope>  (. GCRecord ifRecord; .)
=
	"if" (. ifRecord = semantic.startIf(); .)  guardedCommandList<scope, ifRecord > 
	"fi" (. semantic.endIf(ifRecord); .).
/*----------------------------------------------------------*/
doStatement<SymbolTable scope>  (. GCRecord doRecord; .)
=
	"do" (. doRecord = semantic.startDo(); .) guardedCommandList<scope, doRecord >  
	"od" .
/*----------------------------------------------------------*/
forStatement<SymbolTable scope>  (. Expression exp; int startLabel;.)
=
	"forall" variableAccessEtc<^exp, scope>  "->"  (.startLabel =  semantic.startFor(exp); .)
	statementPart<scope>
	"llarof"   (. semantic.endFor(exp, startLabel); .).
/*----------------------------------------------------------*/
guardedCommandList<SymbolTable scope, GCRecord ifRecord>
=
	guardedCommand<scope, ifRecord> { "[]" guardedCommand<scope, ifRecord> }.
/*----------------------------------------------------------*/
guardedCommand<SymbolTable scope, GCRecord  ifRecord >  (.  Expression expr; .)
=
	expression<^expr, scope> (. semantic.ifTest(expr, ifRecord, err); .)  "->"
	statementPart<scope>  (. semantic.elseIf(ifRecord); .).
/*----------------------------------------------------------*/
expression<^Expression left, SymbolTable scope>
	(. Expression right; .)
=
	andExpr<^left, scope> 
		{ "|"  andExpr<^right, scope>
		(. left = semantic.booleanExpression(left, BooleanOperator.OR, right); .)
		}.
/*----------------------------------------------------------*/
andExpr<^Expression left, SymbolTable scope>
	(. Expression right; .)
=
	relationalExpr<^left, scope> 
		{ "&"  relationalExpr<^right, scope>
		(. left = semantic.booleanExpression(left, BooleanOperator.AND, right); .)
		}.
/*----------------------------------------------------------*/
relationalExpr<^Expression left, SymbolTable scope>
	(. Expression right; RelationalOperator op; .)
=
	simpleExpr<^left, scope>
		[ relationalOperator<^op>   simpleExpr<^right, scope>
		(. left = semantic.compareExpression(left, op, right); .)
		].
/*----------------------------------------------------------*/
simpleExpr<^Expression left, SymbolTable scope>
	(. Expression right; AddOperator op; left = null; .)
=
	(	["+"]term<^ left, scope>
		|  "-" term<^ left, scope>  
					(. left = semantic.negateExpression(left); .)
	)
	{  	addOperator<^op>  term<^right, scope>
			(. left = semantic.addExpression(left, op, right); .)
	}.
/*----------------------------------------------------------*/
term<^Expression left, SymbolTable scope>
	(. Expression right; MultiplyOperator op; .)
=
	factor<^ left, scope> { multiplyOperator<^op>  factor<^right, scope>
	(. left = semantic.multiplyExpression(left, op, right); .) }.
/*----------------------------------------------------------*/
factor<^Expression result, SymbolTable scope>  (. result = null; .)
=
	   variableAccessEtc<^result, scope> 
	|  numeral
	  (. result = new ConstantExpression (integerType, Integer.parseInt(currentToken().spelling()));
	  .)
	| "(" expression<^result, scope> ")"
	| (. Expression exp;
		 ExpressionList tupleFields = new ExpressionList();
	  .)
		"[" expression<^exp, scope>
			(. tupleFields.enter(exp); .)
		 { "," expression<^exp, scope>
		 	(. tupleFields.enter(exp); .)
		 }
		"]"  (. result = semantic.buildTuple(tupleFields); .)
	| booleanConstant<^result>
	| "~" factor<^result, scope> 
		(. result = semantic.booleanNegate(result); .).

/*----------------------------------------------------------*/
booleanConstant<^ConstantExpression value> (. value = null; .)
=
	"true" (. value = new ConstantExpression (booleanType, 1); .)
	| "false" (. value = new ConstantExpression (booleanType, 0); .).
/*----------------------------------------------------------*/
relationalOperator<^RelationalOperator op>  (. op = null; .)
=
	"="  (. op = RelationalOperator.EQUAL; .)
	| "#" (. op = RelationalOperator.NOT_EQUAL; .)
	| "<" (. op = RelationalOperator.LESS_THAN; .)
	| "<=" (. op = RelationalOperator.LESS_THAN_EQUAL; .)
	| ">" (. op = RelationalOperator.GREATER_THAN; .)
	| ">=" (. op = RelationalOperator.GREATER_THAN_EQUAL; .).
/*----------------------------------------------------------*/
addOperator<^AddOperator op > (. op = null; .)
 =
 	"+"  (. op = AddOperator.PLUS; .)
 	| "-" (. op = AddOperator.MINUS; .).
/*----------------------------------------------------------*/
multiplyOperator<^MultiplyOperator op > 	(. op = null; .)
=
	"*"   (. op = MultiplyOperator.TIMES; .)
	| "/"  (. op = MultiplyOperator.DIVIDE; .)
	| "\\" (. op = MultiplyOperator.MODULUS; .).
/*----------------------------------------------------------*/
qualifiedIdentifier<^SemanticItem result, SymbolTable scope> 
=
identifier (. Identifier id = new Identifier(currentToken().spelling()); result = semantic.semanticValue(scope, id); .)
			[ "." identifier 
			(. Identifier modulesID = new Identifier(currentToken().spelling()); 
			   result = semantic.semanticValue(scope, id, modulesID); .)
			] .
/*----------------------------------------------------------*/
variableAccessEtc<^Expression result, SymbolTable scope>  
      (. SemanticItem workValue; result = null; .)   
=
((qualifiedIdentifier<^workValue, scope> (. result = workValue.expectExpression(err); .)) 
| ("this" (.result = semantic.resolveThis();.)))
subsAndCompons<^result, result, scope>.

subsAndCompons<^Expression result, Expression value, SymbolTable scope>
(.  Expression subscriptValue; result = value;.)
=
{ "[" expression<^subscriptValue, scope> "]" (. result = semantic.subscriptAction(result, subscriptValue); .) | "@" identifier (. Identifier id = new Identifier(currentToken().spelling()); result = semantic.extractField(result, id); .) }.
END gcl.